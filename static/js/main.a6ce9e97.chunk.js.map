{"version":3,"sources":["components/Card.jsx","components/CardList.jsx","components/SearchBox.jsx","components/Scroll.jsx","components/ErrorBoundry.jsx","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","map","robot","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","e","target","value","fetch","then","response","json","users","filteredRobots","filter","toLocaleLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2OAgBeA,EAdF,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,GAE3B,OAEE,yBAAKC,UAAU,oDACb,yBAAKC,IAAI,SAASC,IAAG,+BAA0BH,EAA1B,cACrB,6BACE,4BAAKF,GACL,2BAAIC,OCYGK,EAlBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAKlB,OAEE,6BACGA,EAAOC,KAAI,SAACC,EAAOC,GAElB,OACE,kBAAC,EAAD,CAAMC,IAAKD,EAAGR,GAAIO,EAAMP,GAAIF,KAAMS,EAAMT,KAAMC,MAAOQ,EAAMR,cCCtDW,EAbG,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aAChC,OACE,yBAAKX,UAAU,OACb,2BACEA,UAAU,mCACVY,KAAK,SACLC,YAAaH,EACbI,SAAUH,MCQHI,EAfA,SAAAC,GAEb,OACE,yBACEC,MAAO,CACLC,UAAW,SACXC,OAAQ,kBACRC,OAAQ,UAGTJ,EAAMK,WCUEC,E,YApBb,WAAYN,GAAQ,IAAD,8BACjB,4CAAMA,KACDO,MAAQ,CACXC,UAAU,GAHK,E,+EAODC,EAAOC,GACvBC,KAAKC,SAAS,CAAEJ,UAAU,M,+BAK1B,OAAIG,KAAKJ,MAAMC,SACN,8DAEFG,KAAKX,MAAMK,a,GAjBKQ,aC0EZC,G,kBAxDb,aAAe,IAAD,8BACZ,+CAmBFC,eAAiB,SAAAC,GAEf,EAAKJ,SAAS,CAAElB,YAAasB,EAAEC,OAAOC,SApBtC,EAAKX,MAAQ,CAEXnB,OAAQ,GACRM,YAAa,IALH,E,iFAUO,IAAD,OAIlByB,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAAExB,OAAQmC,S,+BASjC,IAAD,EACyBZ,KAAKJ,MAA7BnB,EADD,EACCA,OAAQM,EADT,EACSA,YACV8B,EAAiBpC,EAAOqC,QAAO,SAAAnC,GACnC,OAAOA,EAAMT,KACV6C,oBACAC,SAASjC,EAAYgC,wBAO1B,OAAQtC,EAAOwC,OAGb,yBAAK5C,UAAU,MACb,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CACEU,YAAY,gBACZC,aAAcgB,KAAKI,iBAErB,kBAAC,EAAD,KACE,kBAAC,EAAD,KACE,kBAAC,EAAD,CAAU3B,OAAQoC,OAVxB,2C,GAvCYX,c,MCPEgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,iB","file":"static/js/main.a6ce9e97.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({ name, email, id }) => {\n  // const { name, email, id } = props;\n  return (\n    // can't have multiple elements being returned\n    <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n      <img alt=\"robots\" src={`https://robohash.org/${id}?200x200`} />\n      <div>\n        <h2>{name}</h2>\n        <p>{email}</p>\n      </div>\n    </div>\n  );\n};\n\nexport default Card;\n","import React from 'react';\nimport Card from './Card';\n\n// destructuring from robots.js\nconst CardList = ({ robots }) => {\n  // still throws error because in development mode\n  // if (true) {\n  //   throw new Error('NOOO!');\n  // }\n  return (\n    // second parameter, index\n    <div>\n      {robots.map((robot, i) => {\n        // key prop should not change;\n        return (\n          <Card key={i} id={robot.id} name={robot.name} email={robot.email} />\n        );\n      })}\n    </div>\n  );\n};\n\nexport default CardList;\n","import React from 'react';\n\n// will work without searchfield..\nconst SearchBox = ({ searchfield, searchChange }) => {\n  return (\n    <div className=\"pa2\">\n      <input\n        className=\"pa3 ba b--green bg-lightest-blue\"\n        type=\"search\"\n        placeholder={searchfield}\n        onChange={searchChange}\n      />\n    </div>\n  );\n};\n\nexport default SearchBox;\n","import React from 'react';\n// props, state, and children...\n\nconst Scroll = props => {\n  // must camelCalse for JSX; instead of overflow-y it's overflowY\n  return (\n    <div\n      style={{\n        overflowY: 'scroll',\n        border: '1px solid black',\n        height: '500px'\n      }}\n    >\n      {props.children}\n    </div>\n  );\n};\n\nexport default Scroll;\n","import React, { Component } from 'react';\n\nclass ErrorBoundry extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false\n    };\n  }\n\n  componentDidCatch(error, info) {\n    this.setState({ hasError: true });\n  }\n\n  // wrap the CardList component with ErrorBoundry component, so when CardList fail to render, it catches it;\n  render() {\n    if (this.state.hasError) {\n      return <h1>Oops. Something's not right.. </h1>;\n    }\n    return this.props.children;\n  }\n}\n\nexport default ErrorBoundry;\n","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\n// import { robots } from './robots';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\nimport './App.css';\n\n// to write a class: import Component - has access to render() method\n\n// state\n// const state = {\n//   robots: robots,\n//   searchfield: ''\n// };\n\n// Mounting - replacing root with App;\n\n// this is a smart component; classes have access to state\nclass App extends Component {\n  constructor() {\n    super(); // calls constuctor of Component, which gives access to this.state\n    this.state = {\n      //robots: robots, | robots should be empty array instead of hard coded data\n      robots: [], // property\n      searchfield: '' // property\n    };\n  } // saving searchfield as a state so we can use it (for filtering, in this case)\n\n  // one of the life cycle method\n  componentDidMount() {\n    // updated the state; it runs render again\n\n    // fetch is a part of window object\n    fetch('https://jsonplaceholder.typicode.com/users') // make an API request, a promise gets returned\n      .then(response => response.json()) // convert it to JSON object (which is another promise)\n      .then(users => this.setState({ robots: users }));\n  }\n\n  // binds automatically...?\n  onSearchChange = e => {\n    // can only modify state through this method; never this.state.xx = xx, goes back to the idea of one direction data flow\n    this.setState({ searchfield: e.target.value }); // one of the Component method\n  };\n\n  render() {\n    const { robots, searchfield } = this.state; // object destructuring\n    const filteredRobots = robots.filter(robot => {\n      return robot.name\n        .toLocaleLowerCase()\n        .includes(searchfield.toLocaleLowerCase());\n    });\n\n    // the \"key\" makes it easier for react to update information in the future if it happens, without re-redering everything\n    // robots.map(robot =>  <h1 key={robot.id}>{robot.name}</h1>);\n\n    // if robots.length === 0\n    return !robots.length ? (\n      <h1>Loading</h1>\n    ) : (\n      <div className=\"tc\">\n        <h1 className=\"f1\">RoboFriends</h1>\n        <SearchBox\n          searchfield=\"search robots\"\n          searchChange={this.onSearchChange}\n        />\n        <Scroll>\n          <ErrorBoundry>\n            <CardList robots={filteredRobots} />\n          </ErrorBoundry>\n        </Scroll>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'; // allows HTML syntax inside JS function\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\n// finds something with ID of \"root\", replacing it with <App/ >\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}